generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String?   @unique
  emailVerified       DateTime?
  passwordDigest      String?
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  role                UserRole  @default(USER)
  inviteToken         String?   @unique
  lastLoggedInAt      DateTime?
  isTokenUsed         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  invitedBy           String?
  pin                 String?
  pinCreatedAt        DateTime?
  pinType             String?
  pinVerifiedAt       DateTime?
  accounts            Account[]
  profile             Profile?
  squareCustomerId    String?
  bookings            Booking[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  tokenType         String?
  expiresAt         Int?
  scope             String?
  idToken           String?
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String   @default("")
  lastName    String   @default("")
  latinName   String   @default("")
  sex         String?
  dob         String?
  country     Country?
  height      Int?
  weight      Int?
  picture     String?
  priceMin    Int?
  priceMax    Int?
  notifyEmail Boolean  @default(true)
  notifyPush  Boolean  @default(true)
  notifyBadge Boolean  @default(true)
  historyId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model SmsRequestAttempt {
  id          String   @id @default(cuid())
  phoneNumber String
  ipAddress   String
  createdAt   DateTime @default(now())
}

model FileUpload {
  id             String    @id @default(cuid())
  fileGroup      String?
  fileLink       String
  fileSource     String
  removedAt      DateTime?
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  fileCategory   String?
  fileSourceDate String?
  fileMIMEType   String
}

enum UserRole {
  USER
  ADMIN
}

enum Country {
  us
  mn
}

model IP2Location {
  id          String   @id @default(cuid())
  ipFrom      BigInt
  ipTo        BigInt
  countryCode String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FirebaseToken {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdditionServiceConfig {
  id        String   @id @default(cuid())
  name      String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id                String              @id @default(cuid())
  squareBookingId   String
  data              Json // Booking data from squareup API
  personData        Json[] // Will store how many different customer is taking this services
  startDate         DateTime // Will use to send confirmation action few hours before booking service start
  userId            String
  status            BookingStatus
  updatedBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingStatusList BookingStatusList[]
}

// list of booking status change
model BookingStatusList {
  id        String        @id @default(cuid())
  bookingId String
  booking   Booking       @relation(fields: [bookingId], references: [id])
  status    BookingStatus
  updateBy  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// New staff should be have high priority
model Staff {
  id        String   @id @default(cuid())
  staffId   String
  priority  Int // Lower is highest priority StaffRoundingNumber.lastNumber
  name      String // Staff name just for display
  data      Json //Rest of the data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffRoundingNumber {
  id         String @id @default(cuid())
  lastNumber Int    @default(0)
}

model LocationSettings {
  id               String   @id @default(cuid())
  name             String
  parallelCategory Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
